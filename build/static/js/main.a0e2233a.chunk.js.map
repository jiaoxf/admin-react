{"version":3,"sources":["components/layout/menu.js","App.js","serviceWorker.js","index.js"],"names":["Header","Layout","Content","Footer","Sider","SubMenu","Menu","SiderDemo","state","collapsed","onCollapse","console","log","setState","style","minHeight","collapsible","this","className","lineHeight","theme","defaultSelectedKeys","mode","Item","key","PieChartOutlined","DesktopOutlined","title","UserOutlined","TeamOutlined","FileOutlined","padding","margin","textAlign","React","Component","map","number","toString","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0RAUQA,EAAmCC,IAAnCD,OAAQE,EAA2BD,IAA3BC,QAASC,EAAkBF,IAAlBE,OAAQC,EAAUH,IAAVG,MACzBC,EAAYC,IAAZD,QA2EOE,E,2MAxEbC,MAAQ,CACNC,WAAW,G,EAGbC,WAAa,SAAAD,GACXE,QAAQC,IAAIH,GACZ,EAAKI,SAAS,CAAEJ,e,wEAIhB,OACE,kBAAC,IAAD,CAAQK,MAAO,CAAEC,UAAW,UAC1B,kBAACX,EAAD,CAAOY,aAAW,EAACP,UAAWQ,KAAKT,MAAMC,UAAWC,WAAYO,KAAKP,YACnE,yBAAKQ,UAAU,OAAOJ,MAAO,CAACK,WAAW,SAAzC,qBAGA,kBAAC,IAAD,CAAMC,MAAM,OAAOC,oBAAqB,CAAC,KAAMC,KAAK,UAClD,kBAAC,IAAKC,KAAN,CAAWC,IAAI,KACb,kBAACC,EAAA,EAAD,MACA,2CAEF,kBAAC,IAAKF,KAAN,CAAWC,IAAI,KACb,kBAACE,EAAA,EAAD,MACA,2CAEF,kBAACrB,EAAD,CACEmB,IAAI,OACJG,MACE,8BACE,kBAACC,EAAA,EAAD,MACA,wCAIJ,kBAAC,IAAKL,KAAN,CAAWC,IAAI,KAAf,OACA,kBAAC,IAAKD,KAAN,CAAWC,IAAI,KAAf,QACA,kBAAC,IAAKD,KAAN,CAAWC,IAAI,KAAf,SAEF,kBAACnB,EAAD,CACEmB,IAAI,OACJG,MACE,8BACE,kBAACE,EAAA,EAAD,MACA,wCAIJ,kBAAC,IAAKN,KAAN,CAAWC,IAAI,KAAf,UACA,kBAAC,IAAKD,KAAN,CAAWC,IAAI,KAAf,WAEF,kBAAC,IAAKD,KAAN,CAAWC,IAAI,KACb,kBAACM,EAAA,EAAD,SAIN,kBAAC,IAAD,CAAQZ,UAAU,eAChB,kBAAClB,EAAD,CAAQkB,UAAU,yBAAyBJ,MAAO,CAAEiB,QAAS,KAC7D,kBAAC7B,EAAD,CAASY,MAAO,CAAEkB,OAAQ,WACxB,kBAAC,IAAD,CAAYlB,MAAO,CAAEkB,OAAQ,WAC3B,kBAAC,IAAWT,KAAZ,aACA,kBAAC,IAAWA,KAAZ,cAEF,yBAAKL,UAAU,yBAAyBJ,MAAO,CAAEiB,QAAS,GAAIhB,UAAW,MAAzE,uBAIF,kBAACZ,EAAD,CAAQW,MAAO,CAAEmB,UAAW,WAA5B,a,GAnEcC,IAAMC,WCIlB,CAAC,EAAG,EAAG,EAAG,EAAG,GAELC,KAAI,SAAAC,GAAM,OAC5B,wBAAIb,IAAKa,EAAOC,YAAcD,MAyBbH,IAAMC,U,IAyDVI,EAhFf,WACE,OACE,yBAAKrB,UAAU,OACb,iCAgBA,kBAAC,EAAD,QC7BcsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,cCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.a0e2233a.chunk.js","sourcesContent":["import React from 'react'\nimport { Layout, Menu, Breadcrumb } from 'antd';\nimport {\n  DesktopOutlined,\n  PieChartOutlined,\n  FileOutlined,\n  TeamOutlined,\n  UserOutlined,\n} from '@ant-design/icons';\n\nconst { Header, Content, Footer, Sider } = Layout;\nconst { SubMenu } = Menu;\n\nclass SiderDemo extends React.Component {\n  state = {\n    collapsed: false,\n  };\n\n  onCollapse = collapsed => {\n    console.log(collapsed);\n    this.setState({ collapsed });\n  };\n\n  render() {\n    return (\n      <Layout style={{ minHeight: '100vh' }}>\n        <Sider collapsible collapsed={this.state.collapsed} onCollapse={this.onCollapse}>\n          <div className=\"logo\" style={{lineHeight:'60px'}}>\n            Admin管理\n          </div>\n          <Menu theme=\"dark\" defaultSelectedKeys={['1']} mode=\"inline\">\n            <Menu.Item key=\"1\">\n              <PieChartOutlined />\n              <span>Option 1</span>\n            </Menu.Item>\n            <Menu.Item key=\"2\">\n              <DesktopOutlined />\n              <span>Option 2</span>\n            </Menu.Item>\n            <SubMenu\n              key=\"sub1\"\n              title={\n                <span>\n                  <UserOutlined />\n                  <span>User</span>\n                </span>\n              }\n            >\n              <Menu.Item key=\"3\">Tom</Menu.Item>\n              <Menu.Item key=\"4\">Bill</Menu.Item>\n              <Menu.Item key=\"5\">Alex</Menu.Item>\n            </SubMenu>\n            <SubMenu\n              key=\"sub2\"\n              title={\n                <span>\n                  <TeamOutlined />\n                  <span>Team</span>\n                </span>\n              }\n            >\n              <Menu.Item key=\"6\">Team 1</Menu.Item>\n              <Menu.Item key=\"8\">Team 2</Menu.Item>\n            </SubMenu>\n            <Menu.Item key=\"9\">\n              <FileOutlined />\n            </Menu.Item>\n          </Menu>\n        </Sider>\n        <Layout className=\"site-layout\">\n          <Header className=\"site-layout-background\" style={{ padding: 0 }} />\n          <Content style={{ margin: '0 16px' }}>\n            <Breadcrumb style={{ margin: '16px 0' }}>\n              <Breadcrumb.Item>User</Breadcrumb.Item>\n              <Breadcrumb.Item>Bill</Breadcrumb.Item>\n            </Breadcrumb>\n            <div className=\"site-layout-background\" style={{ padding: 24, minHeight: 360 }}>\n              焦学峰\n            </div>\n          </Content>\n          <Footer style={{ textAlign: 'center' }}>UED</Footer>\n        </Layout>\n      </Layout>\n    );\n  }\n}\nexport default SiderDemo","import React from 'react';\nimport './App.css';\n/* import Toggle from './components/button'\nimport Login from './components/login'\nimport ListItem from './components/listItem'\nimport NameForm from './components/form'\nimport Textarea from './components/textarea'\nimport Select from './components/select'\nimport MoreInput from './components/moreinput'\nimport Calculator from './components/statepromote'\nimport Dialog from './components/childrenprop'\nimport Compose from './components/compose'\nimport Example from './components/hookState'\nimport HookEffect from './components/hookEffect' */\nimport Menu from './components/layout/menu'\n\n// moment.locale('zh-cn');\nconst arr = [1, 2, 3, 4, 5];\nconst arr2 = [1, 2, 3, 4, 5, 6, 7];\nconst arrItem = arr.map(number => \n  <li key={number.toString()}>{ number }</li>\n)\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header>\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n        {/* <Text name=\"我是父组件的新props\"/>\n        <Login isLogin=\"true\"/>\n        <ul>{ arrItem }</ul>\n        <ListItem list={arr2} />\n        <NameForm />\n        <Textarea />\n        <Select />\n        <MoreInput />\n        <Calculator />\n        <Dialog />\n        <Compose />\n        <Example />\n        <HookEffect /> */}\n      </header>\n      <Menu />\n    </div>\n  );\n}\nclass Text extends React.Component{\n  constructor(props) {\n    console.log('constructor执行了')\n    super(props)\n    this.handleChange = this.handleChange.bind(this)\n    let s = Symbol()\n    console.log(typeof s)\n  }\n\n  state = {\n    user: 'hello',\n    name: '爸爸'\n  }\n  handleChange(e) {\n    this.setState({\n      msg: e.target.value\n    })\n  }\n  componentWillMount(){\n    console.log('componentWillMount执行了')\n    this.setState({\n      user: '焦学峰',\n      name: '你好呀'\n    })\n  }\n  render(){\n    console.log('render函数执行了')\n    return(\n      <div>\n        <h1>我是一个组件,{this.state.user}名字：{this.state.name} props的内容：</h1>\n        <input type=\"text\" defaultValue={this.props.name} onChange={this.handleChange}/>\n        {/* <Toggle /> */}\n      </div>\n    )\n  }\n  componentDidMount(){\n    console.log('componentDidMount函数执行了')\n    this.setState({\n      name: '改变了'\n    })\n  }\n  componentWillReceiveProps(nextprops){\n    console.log('componentWillReceiveProps函数执行了,新的props是'+nextprops)\n  }\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log(nextProps)\n    console.log(nextState)\n    console.log('sholdComponentUpdate执行了')\n    return true\n  }\n  componentWillUpdate(){\n    console.log('componentWillUpdate函数执行了')\n  }\n  // componentDidMount(){\n  //   console.log('componentDidMount执行')\n  // }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport zhCN from 'antd/es/locale/zh_CN';\nimport moment from 'moment';\nimport 'antd/dist/antd.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}